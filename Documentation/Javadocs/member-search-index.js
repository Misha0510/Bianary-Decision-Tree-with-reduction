memberSearchIndex = [{"p":"com.example","c":"App","l":"App()","u":"%3Cinit%3E()"},{"p":"com.example","c":"App","l":"B_FUNCTION"},{"p":"com.example","c":"BinaryTree","l":"bddUse(String, TreeNode)","u":"bddUse(java.lang.String,com.example.TreeNode)"},{"p":"com.example","c":"TreeNode","l":"bFunction"},{"p":"com.example","c":"BinaryTree","l":"BinaryTree(String, String)","u":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"com.example","c":"DNF","l":"convertToString(String[])","u":"convertToString(java.lang.String[])"},{"p":"com.example","c":"BinaryTree","l":"createLvl(int, int, NodeObject[], TreeNode)","u":"createLvl(int,int,com.example.NodeObject[],com.example.TreeNode)"},{"p":"com.example","c":"DNF","l":"DNF()","u":"%3Cinit%3E()"},{"p":"com.example","c":"DNF","l":"generateConjunction(String)","u":"generateConjunction(java.lang.String)"},{"p":"com.example","c":"DNF","l":"generateDNF(String, Integer)","u":"generateDNF(java.lang.String,java.lang.Integer)"},{"p":"com.example","c":"DNF","l":"generatePretty(String, int, int)","u":"generatePretty(java.lang.String,int,int)"},{"p":"com.example","c":"TreeNode","l":"getbFunction()"},{"p":"com.example","c":"NodeObject","l":"getHash()"},{"p":"com.example","c":"TreeNode","l":"getLeft()"},{"p":"com.example","c":"TreeNode","l":"getLetter()"},{"p":"com.example","c":"NodeObject","l":"getNode()"},{"p":"com.example","c":"BinaryTree","l":"getOrder()"},{"p":"com.example","c":"TreeNode","l":"getOrder()"},{"p":"com.example","c":"TreeNode","l":"getRight()"},{"p":"com.example","c":"NodeObject","l":"hash"},{"p":"com.example","c":"DNF","l":"hashCode(String, String)","u":"hashCode(java.lang.String,java.lang.String)"},{"p":"com.example","c":"BinaryTree","l":"insertTable(NodeObject[], String, String, String)","u":"insertTable(com.example.NodeObject[],java.lang.String,java.lang.String,java.lang.String)"},{"p":"com.example","c":"TreeNode","l":"left"},{"p":"com.example","c":"TreeNode","l":"letter"},{"p":"com.example","c":"App","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"com.example","c":"NodeObject","l":"node"},{"p":"com.example","c":"BinaryTree","l":"nodeCount"},{"p":"com.example","c":"NodeObject","l":"NodeObject(BigInteger, TreeNode)","u":"%3Cinit%3E(java.math.BigInteger,com.example.TreeNode)"},{"p":"com.example","c":"BinaryTree","l":"ONE"},{"p":"com.example","c":"BinaryTree","l":"order"},{"p":"com.example","c":"TreeNode","l":"order"},{"p":"com.example","c":"App","l":"ORDER"},{"p":"com.example","c":"DNF","l":"pretty(String[], String)","u":"pretty(java.lang.String[],java.lang.String)"},{"p":"com.example","c":"DNF","l":"prettyConjunction(String, String)","u":"prettyConjunction(java.lang.String,java.lang.String)"},{"p":"com.example","c":"BinaryTree","l":"printLvl(int, int, TreeNode)","u":"printLvl(int,int,com.example.TreeNode)"},{"p":"com.example","c":"BinaryTree","l":"printTree()"},{"p":"com.example","c":"DNF","l":"rand"},{"p":"com.example","c":"DNF","l":"removeDuplicates(String[])","u":"removeDuplicates(java.lang.String[])"},{"p":"com.example","c":"TreeNode","l":"right"},{"p":"com.example","c":"BinaryTree","l":"root"},{"p":"com.example","c":"TreeNode","l":"setbFunction(String)","u":"setbFunction(java.lang.String)"},{"p":"com.example","c":"NodeObject","l":"setHash(BigInteger)","u":"setHash(java.math.BigInteger)"},{"p":"com.example","c":"TreeNode","l":"setLeft(TreeNode)","u":"setLeft(com.example.TreeNode)"},{"p":"com.example","c":"TreeNode","l":"setLetter(String)","u":"setLetter(java.lang.String)"},{"p":"com.example","c":"NodeObject","l":"setNode(TreeNode)","u":"setNode(com.example.TreeNode)"},{"p":"com.example","c":"BinaryTree","l":"setOrder(String)","u":"setOrder(java.lang.String)"},{"p":"com.example","c":"TreeNode","l":"setOrder(String)","u":"setOrder(java.lang.String)"},{"p":"com.example","c":"TreeNode","l":"setRight(TreeNode)","u":"setRight(com.example.TreeNode)"},{"p":"com.example","c":"DNF","l":"substituteAllVariables(String, String, String)","u":"substituteAllVariables(java.lang.String,java.lang.String,java.lang.String)"},{"p":"com.example","c":"DNF","l":"substituteVariable(boolean, String, String, String)","u":"substituteVariable(boolean,java.lang.String,java.lang.String,java.lang.String)"},{"p":"com.example","c":"TreeNode","l":"TreeNode(String, String, String)","u":"%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)"},{"p":"com.example","c":"BinaryTree","l":"ZERO"}];updateSearchResults();